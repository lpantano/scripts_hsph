colData = design,
design = ~ sample)
clus_clean_dse <- estimateSizeFactors( clus_clean_dse )
mirna_dse <- DESeqDataSetFromMatrix(countData = obj@counts[rowSums(obj@counts>2)>2,],
colData = design,
design = ~ sample)
sizeFactors(mirna_dse) <- sizeFactors(clus_dse)
norm_w_clus <- counts(mirna_dse,normalized=T)
sizeFactors(mirna_dse) <- sizeFactors(clus_clean_dse)
norm_w_clus_clean <- counts(mirna_dse,normalized=T)
mirna_dse_alone <- estimateSizeFactors(mirna_dse)
norm_w_mirna <- counts(mirna_dse_alone,normalized=T)
raw <- obj@counts
ratio <- data.frame(n2.rep1=raw[,1]/raw[,2],
n2.rep2=raw[,3]/raw[,4],
n2.rep3=raw[,5]/raw[,6],
ko.rep1=raw[,7]/raw[,8],
ko.rep2=raw[,9]/raw[,10],
ko.rep3=raw[,11]/raw[,12])
get_ratio <- function(norm){
data.frame(n2.rep1=norm[,1]/norm[,2],
n2.rep2=norm[,3]/norm[,4],
n2.rep3=norm[,5]/norm[,6],
ko.rep1=norm[,7]/norm[,8],
ko.rep2=norm[,9]/norm[,10],
ko.rep3=norm[,11]/norm[,12])
}
ggplot(melt(get_ratio(norm_w_mirna))) +
geom_boxplot(aes(x=variable,y=value))+
scale_y_log10()+
geom_hline(yintercept=1)+
ggtitle("normalized with miRNAs")
ggplot(melt(get_ratio(norm_w_clus))) +
geom_boxplot(aes(x=variable,y=value))+
scale_y_log10()+
geom_hline(yintercept=1)+
ggtitle("normalized with rRNA")
ggplot(melt(get_ratio(norm_w_clus_clean))) +
geom_boxplot(aes(x=variable,y=value))+
scale_y_log10()+
geom_hline(yintercept=1)+
ggtitle("normalized with tRNA")
ggplot(melt(get_ratio(prop.table(raw,2)*1000000))) +
geom_boxplot(aes(x=variable,y=value))+
scale_y_log10()+
geom_hline(yintercept=1)+
ggtitle("RPM normalization with miRNAs")
library(ggplot2)
library(reshape)
library(gplots)
library(edgeR)
library(CHBUtils)
project_summary = "/home/lpantano/orch/scratch/celegans_network/celegans_network_raw/celegans_mrna/mrna/res/2014-10-15_mrna/project-summary.csv"
counts_file = "/home/lpantano/orch/scratch/celegans_network/celegans_network_raw/celegans_mrna/mrna/res/2014-10-15_mrna/combined.counts"
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")
summarydata = read.table(project_summary, header=TRUE, sep=",")
rownames(summarydata) = summarydata$Name
summarydata = summarydata[order(rownames(summarydata)),]
counts = read.table(counts_file, header=TRUE, row.names="id")
counts = counts[, order(colnames(counts))]
ggplot(summarydata, aes(x=Name, y=Mapped)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("mapped reads") + xlab("")
ggplot(summarydata, aes(x=Name, y=Mapping.Rate)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("mapping rate") + xlab("")
ggplot(summarydata, aes(x=Name, y=Genes.Detected)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("genes detected") + xlab("")
ggplot(summarydata, aes(x=Name, y=Exonic.Rate)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("exonic mapping rate") + xlab("")
ggplot(summarydata, aes(x=Name, y=rRNA.rate)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("rRNA rate") + xlab("")
ggplot(summarydata, aes(x=Name, y=Fragment.Length.Mean)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("fragment length") + xlab("")
melted = melt(counts)
colnames(melted) = c("sample", "count")
melted$sample = factor(melted$sample)
melted$sample = reorder(melted$sample, colnames(counts))
melted$count = log(melted$count)
ggplot(melted, aes(x=sample, y=count)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("")
p = ggheatmap(cor(counts))
ggheatmap.show(p)
y = DGEList(counts=counts)
y = calcNormFactors(y)
normalized_counts = cpm(y, normalized.lib.sizes=TRUE)
melted = melt(normalized_counts)
colnames(melted) = c("gene", "sample", "count")
melted$sample = factor(melted$sample)
melted$sample = reorder(melted$sample, colnames(counts))
melted$count = log(melted$count)
ggplot(melted, aes(x=sample, y=count)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + xlab("")
p = ggheatmap(cor(normalized_counts))
ggheatmap.show(p)
p = ggheatmap(cor(normalized_counts, method="spearman"))
ggheatmap.show(p)
p = ggheatmap(cor(normalized_counts))
ggheatmap.show(p)
p = ggheatmap(cor(normalized_counts, method="spearman"))
ggheatmap.show(p)
mds(normalized_counts, k=length(colnames(normalized_counts)) - 1)
p = ggheatmap(cor(log2(normalized_counts+0.5), method="spearman"))
ggheatmap.show(p)
mds(normalized_counts, k=length(colnames(normalized_counts)) - 1,
conditions=summarydata$type ,d = "cor")
mds(normalized_counts, k=length(colnames(normalized_counts)) - 1,
condition = summarydata$type ,d = "cor")
mds(normalized_counts, k=5,
condition = summarydata$type ,d = "cor")
mds(normalized_counts, k=5,
condition = summarydata$time ,d = "cor")
mds(normalized_counts, k=5,
condition = summarydata$time ,d = "cor", xi=2, yi=3)
mds(normalized_counts, k=5,
condition = summarydata$time ,d = "cor", xi=1, yi=3)
mds(normalized_counts, k=5,
condition = summarydata$time ,d = "cor", xi=1, yi=3) +
scale_color_brewer(palette = "Set1")
select = order(rowMeans(counts),decreasing=TRUE)[1:30]
p = ggheatmap(as.matrix(counts[select,]))
ggheatmap.show(p)
select = order(rowMeans(counts),decreasing=TRUE)[1:30]
p = ggheatmap(as.matrix(log2(counts[select,])))
ggheatmap.show(p)
library(DESeq2)
library(vsn)
design = time + type
condition = "type"
dataset = "celegans_gene_ensembl"
filter = "ensembl_gene_id"
symbol = "external_symbol"
library(DESeq2)
library(vsn)
design = ~ time + type
condition = "type"
dataset = "celegans_gene_ensembl"
filter = "ensembl_gene_id"
symbol = "external_symbol"
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = design)
dds = DESeq(dds)
summarydata
counts <- counts[rowSums(counts>1)>2,]
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = design)
dds = DESeq(dds)
par(mfrow=c(1,3))
notAllZero <- (rowSums(counts(dds))>0)
rld <- rlog(dds)
vsd <- varianceStabilizingTransformation(dds)
rlogMat <- assay(rld)
vstMat <- assay(vsd)
meanSdPlot(log2(counts(dds,normalized=TRUE)[notAllZero,] + 1),
ylim = c(0,2.5))
meanSdPlot(assay(rld[notAllZero,]), ylim = c(0,2.5))
meanSdPlot(assay(vsd[notAllZero,]), ylim = c(0,2.5))
plotDispEsts(dds)
resultsNames(dds)
design$conditions <- paste0(design$type,design$time)
summarydata$conditions <- paste0(design$type,design$time)
summarydata$conditions <- paste0(summarydata$type,summarydata$time)
counts <- counts[rowSums(counts>1)>2,]
summarydata$conditions <- paste0(summarydata$type,summarydata$time)
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = ~condition)
dds = DESeq(dds)
resultsNames(dds)
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = ~ conditions)
dds = DESeq(dds)
resultsNames(dds)
plotMA(res)
res <- results(dse, contrast = c("conditions","N2Day5","N2Day0"))
res <- results(dds, contrast = c("conditions","N2Day5","N2Day0"))
plotMA(res)
DESeq::plotMA(res)
head(res)
DESeq::plotMA(as.data.frame(res))
annotate_df = function(df, dataset, filter, symbol) {
require(biomaRt)
ensembl = useMart('ensembl', dataset = dataset)
annot.df = getBM(attributes=c(filter, symbol), filters=c(filter), values=rownames(df),
mart=ensembl)
m = merge(df, annot.df, by.x="row.names", by.y=filter)
colnames(m)[1] = "id"
return(m)
}
sum(res$padj < 0.01)
res$padj
res_nona <- res[!is.na(res$padj),]
sum(res_nona$padj < 0.01)
sum(res_nona$padj < 0.001)
sum(res_nona$padj < 0.0001)
head(res)
sum(res_nona$padj < 0.01 & abs(res_nonan$log2FoldChange)>2 )
sum(res_nona$padj < 0.01 & abs(res_nona$log2FoldChange)>2 )
sum(res_nona$padj < 0.01 & abs(res_nona$log2FoldChange)>2 & res_nona$baseMean>20)
keep <- res_nona$padj < 0.01 & abs(res_nona$log2FoldChange)>2 & res_nona$baseMean>20
out_df <- annotate_df(data.frame(res[keep,]), dataset, filter, symbol)
symbol = "external_gene_name"
out_df <- annotate_df(data.frame(res[keep,]), dataset, filter, symbol)
knitr::kable(head(out_df))
entres <- "entrezgene"
top50<- row.names(res_nona[keep,])
g.entrez <- as.character(top50[!is.na(top50)])
entres
keep_entrez <- annotate_df(data.frame(res[keep,]), dataset, filter, entres)
top50<- row.names(keep_entrez)
top50
head(keep_entrez)
top50<- row.names(keep_entrez$entrezgene)
g.entrez <- as.character(top50[!is.na(top50)])
top50<- keep_entrez$entrezgene
g.entrez <- as.character(top50[!is.na(top50)])
library(org.Ce.eg.db)
source("http://bioconductor.org/biocLite.R")
biocLite("org.Ce.eg.db")
library(org.Ce.eg.db)
library(org.Ce.eg.db)
set <- universeGO(org.Mm.egGO,"Caenorhabditis elegans")
set <- universeGO(org.Ce.egGO,"Caenorhabditis elegans")
bp<- runGO(g.entrez,set,"BP",as.list(GOBPCHILDREN))
plotGO(bp, 'bp_content', 'png' )
root_path<-"~/orch/scratch/celegans_network/celegans_network_raw/celegans_mrna/mrna/res/2014-10-15_mrna/summary"
setwd(root_path)
plotGO(bp, 'bp_content', 'png' )
mf<-runGO(g.entrez,set,"MF",as.list(GOMFCHILDREN))
plotGO(mf, 'mf_content')
summarydata$conditions <- paste0(summarydata$type,summarydata$time)
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = ~ time*type)
dds = DESeq(dds)
resultsNames(dds)
res <- results(dds, contrast = "timeDay5.typeN2")
res <- results(dds, "timeDay5.typeN2")
res <- results(dds, name = "timeDay5.typeN2")
DESeq::plotMA(as.data.frame(res))
res_nona <- res[!is.na(res$padj),]
keep <- res_nona$padj < 0.01 & abs(res_nona$log2FoldChange)>2 & res_nona$baseMean>20
keep
sum(keep)
sum(res_nona$padj < 0.01)
keep <- res_nona$padj < 0.1 & res_nona$baseMean>20
sum(keep)
keep <- res_nona$padj < 0.01 & res_nona$baseMean>20
out_df <- annotate_df(data.frame(res[keep,]), dataset, filter, symbol)
write.table(out_df,"n2_vs_ko_aling_time_de_genes.txt",sep="\t")
knitr::kable(head(out_df))
out_df <- annotate_df(data.frame(res_nona[keep,]), dataset, filter, symbol)
write.table(out_df,"n2_vs_ko_aling_time_de_genes.txt",sep="\t")
knitr::kable(head(out_df))
resultsNames(dds)
res <- results(dds, name = "type_N2_vs_mir.71")
DESeq::plotMA(as.data.frame(res))
res_nona <- res[!is.na(res$padj),]
keep <- res_nona$padj < 0.01 & res_nona$baseMean>20
out_df <- annotate_df(data.frame(res_nona[keep,]), dataset, filter, symbol)
write.table(out_df,"n2_vs_ko_de_genes.txt",sep="\t")
knitr::kable(head(out_df))
dim(res)
dim(res_nona)
length(keep)
source("~/repos/myRfunctions/transactions.R")
dn
dn <- "slack_mirna_mrna"
copy_batch_2_drop('.txt$', dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
library(rmarkdown)
library(knitr)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
copy_batch_2_drop('.png$', dn)
root_path<-"~/repos/pipelines/slack_cel_network/reports"
setwd(root_path)
copy_batch_2_drop('.txt$', dn)
copy_batch_2_drop('.png$', dn)
res <- results(dds, name = "type_N2_vs_mir.71")
DESeq::plotMA(as.data.frame(res))
res_nona <- res[!is.na(res$padj),]
keep <- res_nona$padj < 0.01 & res_nona$baseMean>20
out_df <- annotate_df(data.frame(res_nona[keep,]), dataset, filter, symbol)
write.table(out_df,"n2_vs_ko_de_genes.txt",sep="\t")
knitr::kable(head(out_df))
keep_entrez <- annotate_df(data.frame(res_nona[keep,]), dataset, filter, entres)
top50<- keep_entrez$entrezgene
g.entrez <- as.character(top50[!is.na(top50)])
bp<- runGO(g.entrez,set,"BP",as.list(GOBPCHILDREN))
plotGO(bp, 'n2ko_bp_content', 'png' )
head(bp[[1]])
mf<-runGO(g.entrez,set,"MF",as.list(GOMFCHILDREN))
plotGO(mf, 'n2ko_mf_content')
mf
keep_entrez
top50
keep <- res_nona$padj < 0.1 & res_nona$baseMean>20
keep_entrez <- annotate_df(data.frame(res_nona[keep,]), dataset, filter, entres)
top50<- keep_entrez$entrezgene
g.entrez <- as.character(top50[!is.na(top50)])
bp<- runGO(g.entrez,set,"BP",as.list(GOBPCHILDREN))
plotGO(bp, 'n2ko_bp_content', 'png' )
bp
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
counts(dds)
counts(dds)["WBGene00000039",]
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
source('~/.active-rstudio-document', echo=TRUE)
plotMA(as.data.frame(res))
resultsNames(dse)
res <- results(dse, contrast = c("conditions","mir71Day0","N2Day0"))
head(res)
plotMA(as.data.frame(res))
res <- results(dse, contrast = c("conditions","mir71Day5","N2Day5"))
head(res)
plotMA(as.data.frame(res))
dse_handle <- function(res){
res_nona <- res[!is.na(res$padj),]
keep <- res_nona$padj < 0.1
res_noan[keep,]
}
dse_handle(res)
dse_handle <- function(res){
res_nona <- res[!is.na(res$padj),]
keep <- res_nona$padj < 0.1
res_nona[keep,]
}
dse_handle(res)
res <- results(dse, contrast = c("conditions","mir71Day0","N2Day0"))
head(res)
plotMA(as.data.frame(res))
res <- dse_handle(res)
knitr::kable(head(res[order(res$pvalue),]))
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
copy_batch_2_drop('.txt$', dn)
dn
getwd()
setwd("~/repos/pipelines/slack_cel_network/reports")
copy_batch_2_drop('.txt$', dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
counts["cel-miR-85-3p",]
counts(dse)["cel-miR-85-3p",]
setwd("~/repos/reports/nytia_singlecell")
source("~/repos/myRfunctions/transactions.R")
render_2_drop("qc-summary.Rmd","nytia_singlecell")
render_2_drop("qc-summary.Rmd","nytia_singlecell")
summarydata
library(ggplot2)
library(reshape)
library(gplots)
library(edgeR)
library(CHBUtils)
project_summary = "~/ody/projects/nytia_singlecell/singlecell/final/2014-10-08_singlecell/project-summar-2y.csv"
counts_file = "~/ody/projects/nytia_singlecell/singlecell/final/2014-10-08_singlecell/combined.counts"
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")
summarydata = read.table(project_summary, header=TRUE, sep=",")
rownames(summarydata) = summarydata$Name
summarydata = summarydata[order(rownames(summarydata)),]
counts = read.table(counts_file, header=TRUE, row.names="id")
counts = counts[, order(colnames(counts))]
summarydata
strsplit("-",summarydata$Name,fixed=2)
strsplit(summarydata$Name,"-",fixed=2)
summarydata$numcells <- gsub("-[1-9]+","",summarydata$Name)
summarydata
ggplot(summarydata, aes(x=Name, y=Mapped, fill=numcell)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("mapped reads") + xlab("") +
theme_bw(base_size=12) +
theme(panel.grid.major = element_line(size = .5, color = "grey"))
ggplot(summarydata, aes(x=Name, y=Mapped, fill=numcells)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 90)) +
ylab("mapped reads") + xlab("") +
theme_bw(base_size=12) +
theme(panel.grid.major = element_line(size = .5, color = "grey"))
render_2_drop("qc-summary.Rmd","nytia_singlecell")
summarydata
setwd("~/repos/pipelines/slack_cel_network/reports")
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
dn
dn
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
obj@counts[grepl("cel-miR-71",row.names(obj@counts)),]
plotIso(onj, type = 't5')
plotIso(obj, type = 't5')
obj@design
obj@design$condition <- paste0(obj@design$smaple,obj@design$time)
plotIso(obj, type = 't5')
obj@design$condition <- paste0(obj@design$sample,obj@design$time)
obj <- plotIso(obj, type = 't5')
obj <- plotIso(obj, type = 't3')
obj <- plotIso(obj, type = 'add')
obj <- plotIso(obj, type = 'nt')
obj <- plotIso(obj, type = 'subs')
obj <- plotIso(obj, type = 'sub')
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mrna.Rmd",dn)
render_2_drop("~/repos/pipelines/slack_cel_network/reports/mirna.rmd",dn)
library("devtools")
devtools::install_github("lpantano/DEGreport","Lite")
devtools::install_github("lpantano/DEGreport","Lite")
devtools::install("~/repos/DEGreport")
BiocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
devtools::install("~/repos/DEGreport")
devtools::install_github("lpantano/DEGreport","Lite",build=F)
library(ggplot2)
library(reshape)
library(gplots)
library(edgeR)
library(CHBUtils)
project_summary = "/home/lpantano/orch/scratch/celegans_network/celegans_network_raw/celegans_mrna/mrna/res/2014-10-15_mrna/project-summary.csv"
counts_file = "/home/lpantano/orch/scratch/celegans_network/celegans_network_raw/celegans_mrna/mrna/res/2014-10-15_mrna/combined.counts"
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")
summarydata = read.table(project_summary, header=TRUE, sep=",")
rownames(summarydata) = summarydata$Name
summarydata = summarydata[order(rownames(summarydata)),]
counts = read.table(counts_file, header=TRUE, row.names="id")
counts = counts[, order(colnames(counts))]
library(DESeq2)
library(DEGreport)
library(vsn)
design = ~ type
condition = "type"
dataset = "hsapiens_gene_ensembl"
filter = "ensembl_gene_id"
symbol = "hgnc_symbol"
counts <- counts[rowSums(counts>0)>1,]
dds = DESeqDataSetFromMatrix(countData=counts,
colData=summarydata, design = design)
dds = DESeq(dds)
par(mfrow=c(1,3))
notAllZero <- (rowSums(counts(dds))>0)
rld <- rlog(dds)
vsd <- varianceStabilizingTransformation(dds)
rlogMat <- assay(rld)
vstMat <- assay(vsd)
meanSdPlot(log2(counts(dds,normalized=TRUE)[notAllZero,] + 1),
ylim = c(0,2.5))
meanSdPlot(assay(rld[notAllZero,]), ylim = c(0,2.5))
meanSdPlot(assay(vsd[notAllZero,]), ylim = c(0,2.5))
handle_deseq2 = function(dds, summarydata, column) {
all_combs = combn(levels(summarydata[,column]), 2, simplify=FALSE)
all_results = list()
contrast_strings = list()
for(comb in all_combs) {
contrast_string = paste(comb, collapse=" vs ")
contrast = c(column, comb)
res = results(dds, contrast=contrast)
res = res[order(res$padj),]
all_results = c(all_results, res)
contrast_strings = c(contrast_strings, contrast_string)
}
names(all_results) = contrast_strings
return(all_results)
}
all_results = handle_deseq2(dds, summarydata, condition)
for(i in seq(length(all_results))) {
plotMA(all_results[[i]])
title(paste("MA plot for contrast", names(all_results)[i]))
}
all_results[[i]]
for(i in seq(length(all_results))) {
degMar(all_results[[i]]$pval,assay(rld)) +
ggtittle(paste0("Pvalues-vs-Variation for ", names(all_results)[i]))
}
for(i in seq(length(all_results))) {
degMean(all_results[[i]]$pval,assay(rld)) +
ggtittle(paste0("Pvalues-vs-Mean for ", names(all_results)[i]))
}
for(i in seq(length(all_results))) {
degMean(all_results[[i]]$pval,assay(rld)) +
ggtitle(paste0("Pvalues-vs-Mean for ", names(all_results)[i]))
}
for(i in seq(length(all_results))) {
print(degMean(all_results[[i]]$pval,assay(rld)) +
ggtitle(paste0("Pvalues-vs-Mean for ", names(all_results)[i])))
}
for(i in seq(length(all_results))) {
print(degVar(all_results[[i]]$pval,assay(rld)) +
ggtittle(paste0("Pvalues-vs-Variation for ", names(all_results)[i])))
}
for(i in seq(length(all_results))) {
print(degVar(all_results[[i]]$pval,assay(rld)) +
ggtitle(paste0("Pvalues-vs-Variation for ", names(all_results)[i])))
}
